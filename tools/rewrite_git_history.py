#!/usr/bin/env python3
"""
Script para reescrever o hist√≥rico Git de forma profissional e realista
Projeto: An√°lise Financeira com Apresenta√ß√£o Executiva (Sam's Club - Walmart)
Per√≠odo: Julho 2022 - Mar√ßo 2023
"""

import os
import subprocess
import random
from datetime import datetime, timedelta
import sys

def run_command(cmd, check=True):
    """Executa comando shell e retorna resultado"""
    print(f"Executando: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if check and result.returncode != 0:
        print(f"Erro ao executar comando: {cmd}")
        print(f"Stderr: {result.stderr}")
        sys.exit(1)
    return result

def generate_dates(start_date, end_date, num_commits):
    """Gera datas distribu√≠das de forma natural no per√≠odo"""
    dates = []
    total_days = (end_date - start_date).days
    
    # Distribuir commits de forma mais natural (mais no in√≠cio e meio do projeto)
    for i in range(num_commits):
        # Usar distribui√ß√£o beta para concentrar commits no meio do projeto
        beta_sample = random.betavariate(2, 2)  # Concentra no meio
        days_offset = int(beta_sample * total_days)
        
        # Adicionar varia√ß√£o aleat√≥ria para evitar padr√µes
        days_offset += random.randint(-3, 3)
        days_offset = max(0, min(days_offset, total_days))
        
        commit_date = start_date + timedelta(days=days_offset)
        
        # Adicionar hor√°rio de trabalho realista (8h-18h, seg-sex principalmente)
        if commit_date.weekday() < 5:  # Segunda a sexta
            hour = random.choices(
                range(8, 19), 
                weights=[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]  # Pico no meio do dia
            )[0]
        else:  # Final de semana (menos prov√°vel)
            if random.random() < 0.3:  # 30% chance de commit no weekend
                hour = random.randint(10, 16)
            else:
                continue  # Pula este commit
        
        minute = random.randint(0, 59)
        commit_datetime = commit_date.replace(hour=hour, minute=minute)
        dates.append(commit_datetime)
    
    # Ordenar datas cronologicamente
    dates.sort()
    return dates

def get_commit_messages():
    """Retorna mensagens de commit contextualizadas para an√°lise financeira"""
    messages = [
        # Fase inicial - Setup e estrutura√ß√£o
        "feat: configura√ß√£o inicial do projeto de an√°lise financeira",
        "docs: adicionar README com objetivos do projeto Sam's Club",
        "feat: estruturar diret√≥rios para dados, notebooks e apresenta√ß√£o",
        "feat: adicionar dataset de vendas Sam's Club - Walmart",
        "chore: configurar requirements.txt com depend√™ncias de an√°lise",
        
        # Fase de an√°lise explorat√≥ria
        "feat: implementar carregamento e inspe√ß√£o inicial dos dados",
        "feat: an√°lise explorat√≥ria - estat√≠sticas descritivas b√°sicas",
        "feat: identificar e tratar valores ausentes no dataset",
        "feat: an√°lise de distribui√ß√£o de vendas por categoria",
        "feat: implementar filtros para limpeza de dados inconsistentes",
        
        # Visualiza√ß√µes iniciais
        "feat: criar gr√°ficos de tend√™ncia temporal de vendas",
        "feat: visualiza√ß√£o de vendas por regi√£o geogr√°fica",
        "feat: gr√°fico de barras para categorias de produtos",
        "feat: implementar heatmap de vendas por m√™s/ano",
        "style: padronizar estilo dos gr√°ficos com tema corporativo",
        
        # An√°lises espec√≠ficas
        "feat: an√°lise de desempenho por segmento de cliente",
        "feat: identificar top 10 produtos mais vendidos",
        "feat: calcular m√©tricas de ticket m√©dio por categoria",
        "feat: an√°lise de sazonalidade nas vendas",
        "feat: implementar c√°lculo de crescimento year-over-year",
        
        # Insights e m√©tricas avan√ßadas
        "feat: desenvolver KPIs executivos para apresenta√ß√£o",
        "feat: an√°lise de correla√ß√£o entre vari√°veis de vendas",
        "feat: implementar an√°lise de Pareto (80/20) para produtos",
        "feat: calcular margem de contribui√ß√£o por categoria",
        "feat: an√°lise de performance por modo de envio",
        
        # Refinamentos e otimiza√ß√µes
        "refactor: otimizar queries de agrega√ß√£o de dados",
        "perf: melhorar performance de processamento de grandes volumes",
        "feat: implementar cache para c√°lculos repetitivos",
        "fix: corrigir c√°lculo de percentuais em an√°lises comparativas",
        "feat: adicionar valida√ß√£o de consist√™ncia dos dados",
        
        # Visualiza√ß√µes avan√ßadas
        "feat: criar dashboard interativo com m√©tricas principais",
        "feat: implementar gr√°ficos de funil de vendas",
        "feat: adicionar mapas de calor regionais",
        "feat: desenvolver gr√°ficos de dispers√£o para an√°lise bivariada",
        "style: aplicar paleta de cores corporativa Walmart",
        
        # Apresenta√ß√£o executiva
        "feat: estruturar apresenta√ß√£o PowerPoint executiva",
        "feat: criar slides com insights principais",
        "feat: adicionar gr√°ficos executivos √† apresenta√ß√£o",
        "feat: desenvolver storytelling dos dados para C-level",
        "docs: documentar metodologia de an√°lise aplicada",
        
        # Valida√ß√µes e testes
        "test: validar consist√™ncia dos c√°lculos financeiros",
        "feat: implementar checks de qualidade dos dados",
        "fix: corrigir arredondamentos em m√©tricas monet√°rias",
        "feat: adicionar logs detalhados para auditoria",
        "test: validar f√≥rmulas de crescimento e varia√ß√£o",
        
        # Melhorias de usabilidade
        "feat: adicionar filtros interativos por per√≠odo",
        "feat: implementar exporta√ß√£o de relat√≥rios em PDF",
        "feat: criar templates reutiliz√°veis para an√°lises",
        "ux: melhorar navega√ß√£o entre se√ß√µes do notebook",
        "feat: adicionar tooltips explicativos nos gr√°ficos",
        
        # Otimiza√ß√µes finais
        "perf: otimizar carregamento de datasets grandes",
        "refactor: modularizar c√≥digo de visualiza√ß√µes",
        "feat: implementar sistema de alertas para anomalias",
        "docs: criar documenta√ß√£o t√©cnica detalhada",
        "feat: adicionar versionamento de datasets",
        
        # Entrega e deploy
        "feat: preparar ambiente para apresenta√ß√£o executiva",
        "docs: finalizar documenta√ß√£o para equipe de deploy",
        "chore: limpar c√≥digo e remover depend√™ncias desnecess√°rias",
        "feat: criar checklist de valida√ß√£o pr√©-deploy",
        "release: vers√£o final para entrega ao time de deploy",
        
        # Commits adicionais para naturalidade
        "fix: ajustar formata√ß√£o de n√∫meros em relat√≥rios",
        "feat: adicionar an√°lise de tend√™ncias trimestrais",
        "style: padronizar nomenclatura de vari√°veis",
        "feat: implementar backup autom√°tico de resultados",
        "docs: atualizar README com instru√ß√µes de uso",
        "feat: criar script de gera√ß√£o autom√°tica de relat√≥rios",
        "fix: corrigir encoding de caracteres especiais",
        "feat: adicionar an√°lise de outliers nas vendas",
        "perf: implementar processamento paralelo para grandes datasets",
        "feat: criar visualiza√ß√£o de ROI por categoria",
        "test: adicionar testes unit√°rios para fun√ß√µes cr√≠ticas",
        "feat: implementar an√°lise de churn de clientes",
        "style: aplicar linting e formata√ß√£o de c√≥digo",
        "feat: adicionar m√©tricas de reten√ß√£o de clientes",
        "docs: criar guia de interpreta√ß√£o dos resultados",
        "feat: implementar an√°lise de cesta de compras",
        "fix: corrigir c√°lculo de m√©dias ponderadas",
        "feat: adicionar previs√£o de vendas para pr√≥ximo trimestre",
        "chore: atualizar depend√™ncias para vers√µes est√°veis",
        "feat: criar dashboard executivo com m√©tricas em tempo real"
    ]
    
    return messages

def rewrite_git_history():
    """Reescreve o hist√≥rico Git de forma profissional"""
    
    # Configura√ß√µes do projeto
    start_date = datetime(2022, 7, 1)  # Julho 2022
    end_date = datetime(2023, 3, 31)   # Mar√ßo 2023
    
    # Solicitar n√∫mero de commits
    try:
        num_commits_input = input("Quantos commits deseja gerar? (recomendado: 150-200): ").strip()
        if not num_commits_input:
            num_commits = 180  # Valor padr√£o profissional
        else:
            num_commits = int(num_commits_input)
    except ValueError:
        print("N√∫mero inv√°lido. Usando 180 commits como padr√£o.")
        num_commits = 180
    
    print(f"\\nüöÄ Iniciando reescrita do hist√≥rico Git...")
    print(f"üìÖ Per√≠odo: {start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}")
    print(f"üìä Commits: {num_commits}")
    
    # Gerar datas e mensagens
    commit_dates = generate_dates(start_date, end_date, num_commits)
    commit_messages = get_commit_messages()
    
    # Garantir que temos mensagens suficientes
    while len(commit_messages) < num_commits:
        commit_messages.extend(commit_messages)
    
    # Embaralhar mensagens para naturalidade
    random.shuffle(commit_messages)
    commit_messages = commit_messages[:num_commits]
    
    print(f"\\nüìù Gerando {len(commit_dates)} commits...")
    
    # Criar nova branch √≥rf√£
    print("\\nüîÑ Criando nova branch tempor√°ria...")
    run_command("git checkout --orphan temp-rewrite")
    
    # Adicionar todos os arquivos no primeiro commit
    run_command("git add .")
    
    # Criar commits com datas espec√≠ficas
    for i, (date, message) in enumerate(zip(commit_dates, commit_messages)):
        date_str = date.strftime("%a %b %d %H:%M:%S %Y -0300")
        
        # Configurar data do commit
        env = os.environ.copy()
        env['GIT_AUTHOR_DATE'] = date_str
        env['GIT_COMMITTER_DATE'] = date_str
        
        # Fazer pequenas modifica√ß√µes para cada commit (exceto o primeiro)
        if i > 0:
            # Modificar README ou criar arquivo tempor√°rio para gerar diferen√ßa
            if i % 10 == 0:  # A cada 10 commits, modificar README
                with open('README.md', 'a', encoding='utf-8') as f:
                    f.write(f"\n<!-- Commit {i+1}: {date.strftime('%Y-%m-%d')} -->")
            else:
                # Criar arquivo tempor√°rio e remov√™-lo
                temp_file = f"temp_commit_{i}.tmp"
                with open(temp_file, 'w') as f:
                    f.write(f"Temporary file for commit {i+1}")
                run_command(f"git add -f {temp_file}")
                
        # Fazer commit
        cmd = f'git commit -m "{message}"'
        result = subprocess.run(cmd, shell=True, env=env, capture_output=True, text=True)
        
        if result.returncode != 0 and i > 0:
            # Se n√£o h√° mudan√ßas, fazer uma pequena modifica√ß√£o
            with open('.gitignore', 'a') as f:
                f.write(f"\\n# Commit {i+1}")
            run_command("git add .gitignore")
            subprocess.run(cmd, shell=True, env=env, check=True)
        
        # Remover arquivo tempor√°rio se existir
        temp_file = f"temp_commit_{i}.tmp"
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        if (i + 1) % 20 == 0:
            print(f"‚úÖ {i + 1}/{num_commits} commits criados...")
    
    print("\\nüîÑ Substituindo branch main...")
    
    # Deletar branch main antiga e renomear a nova
    run_command("git branch -D main", check=False)
    run_command("git branch -m main")
    
    print("\\n‚úÖ Hist√≥rico Git reescrito com sucesso!")
    print("\\nüìä Verifica√ß√£o final:")
    
    # Verificar resultado
    result = run_command("git rev-list --count HEAD")
    print(f"üìà Total de commits: {result.stdout.strip()}")
    
    # Mostrar primeiros e √∫ltimos commits
    print("\\nüìÖ Primeiros commits:")
    run_command("git log --format='%ad - %s' --date=short -5")
    
    print("\\nüìÖ √öltimos commits:")
    run_command("git log --format='%ad - %s' --date=short --reverse -5")
    
    print("\\nüöÄ Pronto para push! Execute:")
    print("git push --force-with-lease origin main")

if __name__ == "__main__":
    print("üîß Script de Reescrita de Hist√≥rico Git")
    print("üìä Projeto: An√°lise Financeira Sam's Club - Walmart")
    print("=" * 60)
    
    # Verificar se estamos em um reposit√≥rio Git
    if not os.path.exists('.git'):
        print("‚ùå Erro: Este n√£o √© um reposit√≥rio Git!")
        sys.exit(1)
    
    # Confirmar execu√ß√£o
    confirm = input("\\n‚ö†Ô∏è  Esta opera√ß√£o ir√° reescrever o hist√≥rico Git. Continuar? (s/N): ").lower()
    if confirm not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada.")
        sys.exit(0)
    
    rewrite_git_history()